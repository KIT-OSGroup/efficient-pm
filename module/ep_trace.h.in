#undef TRACE_SYSTEM
#define TRACE_SYSTEM ep

#if !defined(_EP_TRACE_H) || defined(TRACE_HEADER_MULTI_READ)
#define _EP_TRACE_H

#include <linux/tracepoint.h>

DECLARE_EVENT_CLASS(ep_write_pmem_memcpy_sem_class,
	TP_PROTO(void *dst, const void *src, size_t len),
	TP_ARGS(dst, src, len),
	TP_STRUCT__entry(
		__field(void *, dst)
		__field(const void *, src)
		__field(size_t, len)
	),
	TP_fast_assign(
		__entry->dst = dst;
		__entry->src = src;
		__entry->len = len;
	),
	TP_printk("dst %p src %p len %zd", 
		__entry->dst, 
		__entry->src,
		__entry->len
	)
)

DEFINE_EVENT(ep_write_pmem_memcpy_sem_class,
	ep_write_pmem_memcpy_sem,
	TP_PROTO(void *dst, const void *src, size_t len),
	TP_ARGS(dst, src, len)
);

DEFINE_EVENT(ep_write_pmem_memcpy_sem_class,
	ep_write_pmem_memcpy_sem_done,
	TP_PROTO(void *dst, const void *src, size_t len),
	TP_ARGS(dst, src, len)
);

DEFINE_EVENT(ep_write_pmem_memcpy_sem_class,
	ep_write_pmem_memcpy_sem_write,
	TP_PROTO(void *dst, const void *src, size_t len),
	TP_ARGS(dst, src, len)
);


DEFINE_EVENT(ep_write_pmem_memcpy_sem_class,
	ep_write_pmem_memcpy_sem_write_done,
	TP_PROTO(void *dst, const void *src, size_t len),
	TP_ARGS(dst, src, len)
);

#endif

/* This part must be outside protection */
#undef TRACE_INCLUDE_PATH
#define TRACE_INCLUDE_PATH .

#undef TRACE_INCLUDE_FILE
#define TRACE_INCLUDE_FILE ep_trace

#include <trace/define_trace.h>
